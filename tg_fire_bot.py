import logging
import json
import random
from pathlib import Path
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# üîë –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏ ID
TOKEN = "8061629633:AAHR_ZJC1LRinp-PUfjFoeJsdgcIHge3F6s"
OWNER_ID = 1431532712  # üëà –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# üìÇ –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = Path("users.json")
ADMINS_FILE = Path("admins.json")
EMOJI_FILE = Path("emoji.json")

logging.basicConfig(level=logging.WARNING)

# üîπ –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
def load_data(file, default):
    if file.exists():
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    return default

def save_data(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_data(USERS_FILE, [])
admins = load_data(ADMINS_FILE, [OWNER_ID])
emoji_data = load_data(EMOJI_FILE, {"emoji": "üî•"})

def is_admin(user_id: int) -> bool:
    return user_id in admins

# üîπ –ö–æ–º–∞–Ω–¥—ã
async def addall(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    global users
    users = context.args
    save_data(USERS_FILE, users)
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if context.args:
        users.extend(context.args)
        save_data(USERS_FILE, users)
        await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")

async def dell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if context.args:
        user = context.args[0]
        if user in users:
            users.remove(user)
            save_data(USERS_FILE, users)
            await update.message.reply_text(f"‚ùå {user} —É–¥–∞–ª—ë–Ω")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    global users
    users = []
    save_data(USERS_FILE, users)
    await update.message.reply_text("üßπ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω")

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if users:
        await update.message.reply_text("\n".join(users))
    else:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

async def fire(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not users:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        return
    chosen = random.choice(users)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=f"{emoji_data['emoji']}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=f"–§–æ—Ä—Ç—É–Ω–∞ –≤—ã–±—Ä–∞–ª–∞ —Ç–µ–±—è\n{chosen}")


async def addadm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return
    if context.args:
        try:
            new_admin_id = int(context.args[0])
            if new_admin_id not in admins:
                admins.append(new_admin_id)
                save_data(ADMINS_FILE, admins)
                await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω: {new_admin_id}")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID")

async def emo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if context.args:
        emoji_data["emoji"] = context.args[0]
        save_data(EMOJI_FILE, emoji_data)
        await update.message.reply_text(f"‚úÖ –≠–º–æ–¥–∑–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {emoji_data['emoji']}")

def get_help_text():
    return f"""
üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/addall user1 user2 ... ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/add user ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/dell user ‚Äì —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/clear ‚Äì –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
/list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/fire ‚Äì –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
/addadm user_id ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
/emo üòÄ ‚Äì —Å–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏
/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admins}
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ: {len(users)}
"""

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return
    await update.message.reply_text(get_help_text())

# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("addall", addall))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("dell", dell))
    app.add_handler(CommandHandler("clear", clear))
    app.add_handler(CommandHandler("list", list_users))
    app.add_handler(CommandHandler("fire", fire))
    app.add_handler(CommandHandler("addadm", addadm))
    app.add_handler(CommandHandler("emo", emo))
    app.add_handler(CommandHandler("help", help_command))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(get_help_text())

    # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
